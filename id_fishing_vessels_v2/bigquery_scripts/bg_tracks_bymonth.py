import argparse
import googleapiclient
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from oauth2client.client import GoogleCredentials
from datetime import datetime
import json


'''
# to get the mmsi:
select mmsi, label, label_score, type, type_score from
(select mmsi, label, label_score, type, type_score from
(SELECT *, rand() random FROM [scratch_david_mmsi_lists.neural_classifier_20160304] where label = "Purse seine" and label_score>.5 ORDER BY random) limit 50),
(select mmsi, label, label_score, type, type_score from
(SELECT *, rand() random FROM [scratch_david_mmsi_lists.neural_classifier_20160304] where label = "Trawler" and label_score>.5 ORDER BY random) limit 50),
(select mmsi, label, label_score, type, type_score from
(SELECT *, rand() random FROM [scratch_david_mmsi_lists.neural_classifier_20160304] where label = "Longliner" and label_score>.5 ORDER BY random) limit 50)
'''

# After running this code, you have to upload the files to gcloud
# !gsutil -m cp *  gs://gfw-crowd/
# and then 
# gsutil -m acl set -R -a public-read gs://gfw-crowd/


#ranges of the years
year_range = [2015]
month_range =[i for i in range(1,13)]

# Grab the application's default credentials from the environment.
credentials = GoogleCredentials.get_application_default()
# Construct the service object for interacting with the BigQuery API.
bigquery_service = build('bigquery', 'v2', credentials=credentials)

'''
# Query to create the subtable we are going to select from:
SELECT lat, lon, speed, mmsi, timestamp FROM TABLE_DATE_RANGE([pipeline_normalize.], TIMESTAMP('2015-01-01'), TIMESTAMP('2015-12-31')) 
where mmsi in (725000261,367628440,273815050,540002200,701000764,251498240,211481051,367578250,441864000,412420871,431105000,235069725,520171000,431704110,701027000,227579000,576902000,247149410,257225000,416001414,224154000,440122190,228827000,412985000,416003756,367016310,273810800,310614000,372698000,225378000,245369000,251243240,701000880,225980581,601126000,416002061,227314010,231180000,983191061,525015964,306589000,432228000,416016872,416222700,239236000,338100000,416004565,431802000,367075080,416002900,671659000,457900169,246161000,413784172,413806188,412460726,412201709,650107000,413763254,257205500,412426816,412423861,412444812,563004750,412439347,413205407,226220000,237149000,440126000,413905235,413463160,412460781,257647500,247081680,412419462,250103560,214182117,412460689,412422273,247073090,983712351,367064000,200000075,251030110,412418238,418197905,800026188,525012084,377339000,412435055,413963275,412422649,273375800,412421896,31305246,412410837,412460723,412439319,413987196,440124480,413666218,235103844,412333131,413771715,244391106,466161000,80247,800019314,271072022,412348969,412419573,440151310,412002218,412444889,235009920,412449093,412449876,367450270,200140810,412040902,251415540,345140500,416500000,412332164,412428736,412409229,251140740,412419533,412449691,416003765,224104340,412898888,227698770,227069470,412411683,412410841,225981169,12345888,271072496,258094960,413816324,316026186,412432558,403701810,265613880,413976922,413970364,413985784,900022910,413776038)
and lat is not null and lon is not null and timestamp is not null and speed is not null and lat<90 and lat>-90 and lon<180 and lon>-180 and lon !=0 and lat !=0
'''
vessels = [725000261,367628440,273815050,540002200,701000764,251498240,211481051,367578250,441864000,412420871,431105000,235069725,520171000,431704110,701027000,227579000,576902000,247149410,257225000,416001414,224154000,440122190,228827000,412985000,416003756,367016310,273810800,310614000,372698000,225378000,245369000,251243240,701000880,225980581,601126000,416002061,227314010,231180000,983191061,525015964,306589000,432228000,416016872,416222700,239236000,338100000,416004565,431802000,367075080,416002900,671659000,457900169,246161000,413784172,413806188,412460726,412201709,650107000,413763254,257205500,412426816,412423861,412444812,563004750,412439347,413205407,226220000,237149000,440126000,413905235,413463160,412460781,257647500,247081680,412419462,250103560,214182117,412460689,412422273,247073090,983712351,367064000,200000075,251030110,412418238,418197905,800026188,525012084,377339000,412435055,413963275,412422649,273375800,412421896,31305246,412410837,412460723,412439319,413987196,440124480,413666218,235103844,412333131,413771715,244391106,466161000,80247,800019314,271072022,412348969,412419573,440151310,412002218,412444889,235009920,412449093,412449876,367450270,200140810,412040902,251415540,345140500,416500000,412332164,412428736,412409229,251140740,412419533,412449691,416003765,224104340,412898888,227698770,227069470,412411683,412410841,225981169,12345888,271072496,258094960,413816324,316026186,412432558,403701810,265613880,413976922,413970364,413985784,900022910,413776038]

'''
# Query to create the second subtable we are going to select from:
SELECT lat, lon, speed, mmsi, timestamp FROM TABLE_DATE_RANGE([pipeline_normalize.], TIMESTAMP('2015-01-01'), TIMESTAMP('2015-12-31')) 
where mmsi in (800043191,412422389,412437036,210687000,273437550,413777082,200003926,413809419,413793827,412441901,412205571,413769277,413805503,413033315,413902824,789000000,412437524,412465186,412320451,200007198,333305766,211315630,412437605,525022073,565308000,412460762,245348000,412463326,413972526,413988721,312027000,237287000,413568929,412433621,412400072,422064200,228107800,412436849,413822718,412449955,412424657,413793802,412444542,431402000,244620656,412327561,227468000,412442226,412430318,356076000,273213010,412452175,413815071,503268900,413963113,247268600,412436667,247083940,224098360,316029551,412423012,412439114,369970071,413865245,273523400,413793313,900016793,412299998,412413673,235003170,245883000,412325876,413302770,150000285,677027900,412311548,413421960,412452247,247085680,412445484,900029039,412325768,412286244,413770602,440131430,800060665,338947000,247146950,413991672,412433352,413905237,224047430,431300202,228228700,412022048,457040000,264900259,601484000,234217000,412428133,900016849,231010000,224526000,412423393,311052900,227338180,200005362,228380000,412436746,412441864,244793000,412430638,376602000,316013940,413762403,413769361,273347910,912113290,247050480,413978111,219589000,240013234,412420098,356762000,412327313,228236000,257351500,412421494,412432269,200007580,440134190,512409000,413469040,913983688,247124830,412364883,412444838,238000003,263413770,412421694,413767719,412438926,412423334,273339220,413809203,413766714,413789385,412444811,219010949,276299000,235101158,412676430,416112500,224233000,412674780,224854000,247131490,224072870,412400222,440300160,211543070,251446740,244020877,503603200,412698970,987357573,224290000,215000330,572795210,432990000,627160000,249000210,261022170,503023090,412420846,412425832,338195507,412460007,227334570,987357579,412671890,353670000,338070527,258047520,367088870,224155960,565219000,367901000,247119520,235010466,224081790,266062000,224068340,224101950,725000990,235000670,204213000,234091000,503499700,224936000,574756000,200008088,246511000,247144420,503445400,263422240,514000000,441201732,367086860,319067600,227067860,275129000,205524010,432567899,273373190,247305860,441060000,503794800,525016079,367518040,431000931,431714000,620048000,224182460,316051000,224007250,520243000,368217000,235039435,247142320,367502930,232004315,345050062,412699230,224239970,259457000,257246420,408367000,701000823,231745000,440110570,431086000,247620000,247260700,227667550,273371750,251346540,367569490,251478340,601172000,257271620,227297000,251418110,227300110,367621180,533180120,416004865,227222590,235075914,422223000,367415050,367084860,271010634,412112019,224612000,367623210,566078000,660000200,367507680,503214000,627389000,601352000,235000869,251149110,224020920,416002383,263405380,563810000,273814110,366806770,412329426,258307000,367321640,224992000,636016991,440145380,412460287,231289000,564540000,368065000,261014220,525022136,341892000,412327861,525019530,412444377,576811000,413971156,316004946,413996125,244740701,412803437,271072554,431006559,235110172,235087487,412066008,413826761,244630776,412445218,412300417,413765971,412420218,412330043,412444062,251810540,412428785,224020840,412444931,416000888,366726650,412322222,261016220,412286749,367554370,413790599,800045678,412413009,367444060,413960602,503596400,235008623,244670726,261182850,413792127,412413021,319984000,503778200,265632240,367376310,251581240,265696860,412427805,567051900,412436192,412301618,211479260,224014850,224040160,235066253,412427057,271072982,232002340,900408809,431005678,412423054,1193046,412428377,412081530,412418472,512002819,413854881,211439790,730050000,570513000,402332222,412435834,574087077,412111333,701000884,413781177,265707820,259313000,305908000,66968420,800000029,413703116,412411328,412432431,244690006,725001080,912041188,413902044,413995235,413818687,800033888,413782728,271010491,415678888,224792000,412360688,219006116,856583816,413828896,413905726,367593770,412555555,415080070,800018119,412322072,413828279,413818925,205250790,244100281,412283695,412411153,412416109,412212513,605266426,9102696,412431476,413781825,440644000,225019240,227226520,412415927,413364440,412410337,412002095,300003311,200001929,257177500,235064349,244730797,244850527,316004771,226011210,251184340,412430257,412214306,244660666,412201581,413770499,412450513,657675000,412396885,412476678,820040986,412436798,412431375,235009900,800036508,345036019,412445767,257012540,235076772,412432502)
and lat is not null and lon is not null and timestamp is not null and speed is not null and lat<90 and lat>-90 and lon<180 and lon>-180 and lon !=0 and lat !=0

'''
vessels = [800043191,412422389,412437036,210687000,273437550,413777082,200003926,413809419,413793827,412441901,412205571,413769277,413805503,413033315,413902824,789000000,412437524,412465186,412320451,200007198,333305766,211315630,412437605,525022073,565308000,412460762,245348000,412463326,413972526,413988721,312027000,237287000,413568929,412433621,412400072,422064200,228107800,412436849,413822718,412449955,412424657,413793802,412444542,431402000,244620656,412327561,227468000,412442226,412430318,356076000,273213010,412452175,413815071,503268900,413963113,247268600,412436667,247083940,224098360,316029551,412423012,412439114,369970071,413865245,273523400,413793313,900016793,412299998,412413673,235003170,245883000,412325876,413302770,150000285,677027900,412311548,413421960,412452247,247085680,412445484,900029039,412325768,412286244,413770602,440131430,800060665,338947000,247146950,413991672,412433352,413905237,224047430,431300202,228228700,412022048,457040000,264900259,601484000,234217000,412428133,900016849,231010000,224526000,412423393,311052900,227338180,200005362,228380000,412436746,412441864,244793000,412430638,376602000,316013940,413762403,413769361,273347910,912113290,247050480,413978111,219589000,240013234,412420098,356762000,412327313,228236000,257351500,412421494,412432269,200007580,440134190,512409000,413469040,913983688,247124830,412364883,412444838,238000003,263413770,412421694,413767719,412438926,412423334,273339220,413809203,413766714,413789385,412444811,219010949,276299000,235101158,412676430,416112500,224233000,412674780,224854000,247131490,224072870,412400222,440300160,211543070,251446740,244020877,503603200,412698970,987357573,224290000,215000330,572795210,432990000,627160000,249000210,261022170,503023090,412420846,412425832,338195507,412460007,227334570,987357579,412671890,353670000,338070527,258047520,367088870,224155960,565219000,367901000,247119520,235010466,224081790,266062000,224068340,224101950,725000990,235000670,204213000,234091000,503499700,224936000,574756000,200008088,246511000,247144420,503445400,263422240,514000000,441201732,367086860,319067600,227067860,275129000,205524010,432567899,273373190,247305860,441060000,503794800,525016079,367518040,431000931,431714000,620048000,224182460,316051000,224007250,520243000,368217000,235039435,247142320,367502930,232004315,345050062,412699230,224239970,259457000,257246420,408367000,701000823,231745000,440110570,431086000,247620000,247260700,227667550,273371750,251346540,367569490,251478340,601172000,257271620,227297000,251418110,227300110,367621180,533180120,416004865,227222590,235075914,422223000,367415050,367084860,271010634,412112019,224612000,367623210,566078000,660000200,367507680,503214000,627389000,601352000,235000869,251149110,224020920,416002383,263405380,563810000,273814110,366806770,412329426,258307000,367321640,224992000,636016991,440145380,412460287,231289000,564540000,368065000,261014220,525022136,341892000,412327861,525019530,412444377,576811000,413971156,316004946,413996125,244740701,412803437,271072554,431006559,235110172,235087487,412066008,413826761,244630776,412445218,412300417,413765971,412420218,412330043,412444062,251810540,412428785,224020840,412444931,416000888,366726650,412322222,261016220,412286749,367554370,413790599,800045678,412413009,367444060,413960602,503596400,235008623,244670726,261182850,413792127,412413021,319984000,503778200,265632240,367376310,251581240,265696860,412427805,567051900,412436192,412301618,211479260,224014850,224040160,235066253,412427057,271072982,232002340,900408809,431005678,412423054,1193046,412428377,412081530,412418472,512002819,413854881,211439790,730050000,570513000,402332222,412435834,574087077,412111333,701000884,413781177,265707820,259313000,305908000,66968420,800000029,413703116,412411328,412432431,244690006,725001080,912041188,413902044,413995235,413818687,800033888,413782728,271010491,415678888,224792000,412360688,219006116,856583816,413828896,413905726,367593770,412555555,415080070,800018119,412322072,413828279,413818925,205250790,244100281,412283695,412411153,412416109,412212513,605266426,9102696,412431476,413781825,440644000,225019240,227226520,412415927,413364440,412410337,412002095,300003311,200001929,257177500,235064349,244730797,244850527,316004771,226011210,251184340,412430257,412214306,244660666,412201581,413770499,412450513,657675000,412396885,412476678,820040986,412436798,412431375,235009900,800036508,345036019,412445767,257012540,235076772,412432502]


for mmsi in vessels:
    print mmsi
    try:
        query_request = bigquery_service.jobs()
        query_data = {
            'query': (
                '''SELECT
                      lat,
                      lon,
                      timestamp,
                      speed
                    FROM
                       [scratch_david_vesselsPyBossa.vessels_20160317]
                      //[scratch_david_vesselsPyBossa.vessels_20160304]
                    WHERE
                      mmsi ='''+str(mmsi)+'''
                    ORDER BY
                      timestamp ;''')
        }

        query_response = query_request.query(
            projectId='world-fishing-827',
            body=query_data).execute()

        sogs =[]
        timestamps = []
        lats = []
        lons = []
        
        print('Query Results:')
        if 'rows' in query_response:
            for row in query_response['rows']:
                #print row['f'][0]['v']
                lat = round(float(row['f'][0]['v']),5)
                lon = round(float(row['f'][1]['v']),5)
                sog = round(float(row['f'][3]['v']),1)
                t = int(float(row['f'][2]['v']))
                timestamp = datetime.utcfromtimestamp(t)
                sogs.append(sog)
                lats.append(lat)
                lons.append(lon)
                timestamps.append(timestamp)
                #print('\t'.join(field['v'] for field in row['f']))

    except HttpError as err:
        print('Error: {}'.format(err.content))
        raise err

    for y in year_range:
        for m in month_range:
            m_lats = []
            m_lons = []
            m_sogs = []
            m_timestamps = []
            for i in range(len(lats)):
                if timestamps[i].month == m and timestamps[i].year == y:
                    m_lats.append(lats[i])
                    m_lons.append(lons[i])
                    m_timestamps.append(str(timestamps[i]))
                    m_sogs.append(sogs[i])

            if len(m_lats)>100: #has to have at least 100 positions in the month
                js = {}
                js['lats']=m_lats
                js['lons']=m_lons
                js['sogs']=m_sogs
                js['timestamps']=m_timestamps
                # js['type'] = "LineString"
                # js['coordinates'] = [[round(lon,5),round(lat,5)] for lat,lon in zip(lats,lons)] #stupid to have higher than 5 digets
                t = json.dumps(js)
                f = open("../../data/vessels_20160317/"+str(mmsi)+"_"+str(y)+"_"+str(m)+".json",'w')
                f.write(t)
                f.close()
            else:
                print "month: ",m," no values for "+str(mmsi) 

